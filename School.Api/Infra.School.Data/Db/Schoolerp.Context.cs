//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infra.School.Data.Db
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolErp : DbContext
    {
        public SchoolErp()
            : base("name=SchoolErp")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Assigment> Assigments { get; set; }
        public virtual DbSet<AssignmentUploadStatu> AssignmentUploadStatus { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<AttendanceMaster> AttendanceMasters { get; set; }
        public virtual DbSet<ClassMaster> ClassMasters { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<HolidayMaster> HolidayMasters { get; set; }
        public virtual DbSet<MapQualification> MapQualifications { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<NavigationMenu> NavigationMenus { get; set; }
        public virtual DbSet<PassRecovery> PassRecoveries { get; set; }
        public virtual DbSet<QualificationMaster> QualificationMasters { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleMenuPermission> RoleMenuPermissions { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<SessionMaster> SessionMasters { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentAssignmentFile> StudentAssignmentFiles { get; set; }
        public virtual DbSet<studentmaptoClass> studentmaptoClasses { get; set; }
        public virtual DbSet<SubjectMaster> SubjectMasters { get; set; }
        public virtual DbSet<TeacherDetail> TeacherDetails { get; set; }
        public virtual DbSet<TeachermaptoClassSubject> TeachermaptoClassSubjects { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ClassmaptoSubject> ClassmaptoSubjects { get; set; }
        public virtual DbSet<ResultDetail> ResultDetails { get; set; }
        public virtual DbSet<ResultMaster> ResultMasters { get; set; }
        public virtual DbSet<studentProfileDescription> studentProfileDescriptions { get; set; }
        public virtual DbSet<studentProfileEvalution> studentProfileEvalutions { get; set; }
    
        public virtual ObjectResult<string> Proc_Assingrole(Nullable<System.Guid> uniqueId, Nullable<int> roleId)
        {
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_Assingrole", uniqueIdParameter, roleIdParameter);
        }
    
        public virtual int proc_att(Nullable<int> classId, Nullable<int> sectionid, Nullable<int> year, Nullable<int> month)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var sectionidParameter = sectionid.HasValue ?
                new ObjectParameter("sectionid", sectionid) :
                new ObjectParameter("sectionid", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_att", classIdParameter, sectionidParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<Proc_CheckPermisssion_Result> Proc_CheckPermisssion(string userId, string actionName, string controllerName)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("actionName", actionName) :
                new ObjectParameter("actionName", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("controllerName", controllerName) :
                new ObjectParameter("controllerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_CheckPermisssion_Result>("Proc_CheckPermisssion", userIdParameter, actionNameParameter, controllerNameParameter);
        }
    
        public virtual int Proc_GetAttendaceReport(Nullable<int> classId, Nullable<int> sectionid, Nullable<int> year, Nullable<int> month)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var sectionidParameter = sectionid.HasValue ?
                new ObjectParameter("sectionid", sectionid) :
                new ObjectParameter("sectionid", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetAttendaceReport", classIdParameter, sectionidParameter, yearParameter, monthParameter);
        }
    
        public virtual int Proc_GetAttendaceReportByAdmssionid(string admissionId, Nullable<int> year, Nullable<int> month)
        {
            var admissionIdParameter = admissionId != null ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetAttendaceReportByAdmssionid", admissionIdParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<string> Proc_IsValidToken(string token, string userId)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_IsValidToken", tokenParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> Proc_PasswordRecover(string userid, string callFrom)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var callFromParameter = callFrom != null ?
                new ObjectParameter("callFrom", callFrom) :
                new ObjectParameter("callFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_PasswordRecover", useridParameter, callFromParameter);
        }
    
        public virtual int Proc_StudentDetail(string admissionId, string firstname, string lastName, string gender, string fathername, string motherName, Nullable<int> classId, Nullable<int> sectionId, string rollNo, string email, string phone)
        {
            var admissionIdParameter = admissionId != null ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var fathernameParameter = fathername != null ?
                new ObjectParameter("fathername", fathername) :
                new ObjectParameter("fathername", typeof(string));
    
            var motherNameParameter = motherName != null ?
                new ObjectParameter("motherName", motherName) :
                new ObjectParameter("motherName", typeof(string));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("sectionId", sectionId) :
                new ObjectParameter("sectionId", typeof(int));
    
            var rollNoParameter = rollNo != null ?
                new ObjectParameter("rollNo", rollNo) :
                new ObjectParameter("rollNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_StudentDetail", admissionIdParameter, firstnameParameter, lastNameParameter, genderParameter, fathernameParameter, motherNameParameter, classIdParameter, sectionIdParameter, rollNoParameter, emailParameter, phoneParameter);
        }
    
        public virtual ObjectResult<Proc_ViewResultClass_Result> Proc_ViewResultClass(Nullable<long> classId, Nullable<long> sectionId, Nullable<long> sessionId, string admissionId, string name)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(long));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("sectionId", sectionId) :
                new ObjectParameter("sectionId", typeof(long));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(long));
    
            var admissionIdParameter = admissionId != null ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_ViewResultClass_Result>("Proc_ViewResultClass", classIdParameter, sectionIdParameter, sessionIdParameter, admissionIdParameter, nameParameter);
        }
    
        public virtual int Prop_UpdataPassword(string userId, byte[] passwordHas, byte[] passwordSalt)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var passwordHasParameter = passwordHas != null ?
                new ObjectParameter("PasswordHas", passwordHas) :
                new ObjectParameter("PasswordHas", typeof(byte[]));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("passwordSalt", passwordSalt) :
                new ObjectParameter("passwordSalt", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prop_UpdataPassword", userIdParameter, passwordHasParameter, passwordSaltParameter);
        }
    
        public virtual ObjectResult<proc_ClassSubjectExcel_Result> proc_ClassSubjectExcel(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ClassSubjectExcel_Result>("proc_ClassSubjectExcel", classIdParameter);
        }
    
        public virtual int Proc_GetAttendaceByAdmissionId(string admissionId, Nullable<int> year, Nullable<int> month)
        {
            var admissionIdParameter = admissionId != null ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_GetAttendaceByAdmissionId", admissionIdParameter, yearParameter, monthParameter);
        }
    
        public virtual int Proc_ViewAttendaceDatewise(Nullable<int> classId, Nullable<int> sectionId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("sectionId", sectionId) :
                new ObjectParameter("sectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ViewAttendaceDatewise", classIdParameter, sectionIdParameter);
        }
    
        public virtual int Proc_ViewStudentAssignment(Nullable<int> action, Nullable<int> classid, Nullable<int> subjectid, string uploadOn)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var subjectidParameter = subjectid.HasValue ?
                new ObjectParameter("subjectid", subjectid) :
                new ObjectParameter("subjectid", typeof(int));
    
            var uploadOnParameter = uploadOn != null ?
                new ObjectParameter("uploadOn", uploadOn) :
                new ObjectParameter("uploadOn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ViewStudentAssignment", actionParameter, classidParameter, subjectidParameter, uploadOnParameter);
        }
    }
}
